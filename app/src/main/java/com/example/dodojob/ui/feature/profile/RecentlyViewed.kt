package com.example.dodojob.ui.feature.profile

import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBackIosNew
import androidx.compose.material.icons.outlined.MoreHoriz
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.em
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.compose.foundation.layout.BoxWithConstraints
import com.example.dodojob.R

/* ===================== ÏÉâÏÉÅ ÌÜ†ÌÅ∞ ===================== */
private val PrimaryBlue = Color(0xFF005FFF)
private val TextGray    = Color(0xFF848484)
private val ScreenBg    = Color(0xFFF1F5F7)

/* ===================== Îç∞Ïù¥ÌÑ∞ Î™®Îç∏ ===================== */
data class ViewedItem(
    val id: String,
    val company: String,
    val title: String,
    val isOpen: Boolean,
    val viewedAt: String
)

/* ===================== Fake DB ===================== */
private object RecentFakeDb {
    fun items(): List<ViewedItem> = listOf(
        ViewedItem("v1", "Î™®ÎçòÌïòÏö∞Ïä§", "Îß§Ïû•Ïö¥ÏòÅ Î∞è Í≥†Í∞ùÍ¥ÄÎ¶¨ ÌïòÎäî ÏùºÏóê Ï†ÅÌï©Ìïú Î∂Ñ Íµ¨Ìï¥Ïöî", true, "2025.08.25"),
        ViewedItem("v2", "ÎåÄÍµ¨ÎèôÍµ¨ Ïñ¥Î¶∞Ïù¥ÎèÑÏÑúÍ¥Ä", "ÏïÑÏù¥Îì§ Ï±Ö ÏùΩÏñ¥Ï£ºÍ∏∞, ÎèÖÏÑú ÏäµÍ¥Ä ÌòïÏÑ± ÌîÑÎ°úÍ∑∏Îû® ÏßÄÏõê", false, "2025.08.20"),
        ViewedItem("v3", "ÏàòÏÑ±Íµ¨ Ï≤¥Ïú°ÏÑºÌÑ∞", "ÌöåÏõê Ïö¥Îèô ÏßÄÎèÑ Î≥¥Ï°∞, ÏÑºÌÑ∞ Í¥ÄÎ¶¨ Í∞ÄÎä•ÌïòÏã† Î∂Ñ ÏßÄÏõê ÏöîÎßù", true, "2025.08.14"),
        ViewedItem("v4", "ÎåÄÍµ¨ÎèÑÏãúÏ≤†ÎèÑÍ≥µÏÇ¨", "ÏßÄÌïòÏ≤† Ïó≠ÏÇ¨ ÏïàÏ†Ñ ÏàúÏ∞∞, Ïù¥Ïö©Í∞ù ÏïàÎÇ¥, Î∂ÑÏã§Î¨º Í¥ÄÎ¶¨", false, "2025.08.10"),
    )
}

/* ===================== Route + Screen ===================== */
@Composable
fun RecentViewedRoute(nav: NavController) {
    var all by remember { mutableStateOf(RecentFakeDb.items()) }
    var selectedTab by remember { mutableStateOf(0) }

    val visible = remember(selectedTab, all) {
        if (selectedTab == 0) all else all.filter { it.isOpen }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        RecentTopSection(
            nav = nav,
            countText = countText(visible.size),
            onDeleteClosed = { all = all.filter { it.isOpen } }
        )

        RecentTabBar(
            tabs = listOf("Ï†ÑÏ≤¥", "Î™®ÏßëÏ§ë"),
            selectedIndex = selectedTab,
            onSelected = { selectedTab = it },
            underlineWidth = 68.dp
        )

        RecentList(visible)
    }
}

/* ===================== ÏÉÅÎã® ÏÑπÏÖò ===================== */
@Composable
private fun RecentTopSection(
    nav: NavController,
    countText: AnnotatedString,
    onDeleteClosed: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White)
    ) {
        // ÏÉÅÌÉúÎ∞î (ÌöåÏÉâ ÏòÅÏó≠)
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(24.dp)
                .background(Color(0xFFEFEFEF))
        )

        // üîª min ÎÜíÏù¥ Ï†úÍ±∞ ‚Üí wrap content Î°ú
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight()
                .padding(start = 16.dp, top = 14.dp)
        ) {
            // ÏïÑÏù¥ÏΩò
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(24.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(onClick = { nav.popBackStack() }, modifier = Modifier.size(24.dp)) {
                    Icon(Icons.Outlined.ArrowBackIosNew, contentDescription = "Îí§Î°ú", tint = Color.Black)
                }
            }
            Spacer(Modifier.height(10.dp)) // chevron ‚Üî ÌÉÄÏù¥ÌãÄ

            // ÌÉÄÏù¥ÌãÄ
            Row(
                modifier = Modifier.height(56.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "ÏµúÍ∑º Î≥∏ Í≥µÍ≥†",
                    fontSize = 32.sp,
                    fontWeight = FontWeight.SemiBold,
                    letterSpacing = (-0.019).em,
                    color = Color.Black
                )
            }
        }

        // üîª ÌÉÄÏù¥ÌãÄ ÏïÑÎûò Í∞ÑÍ≤©ÏùÑ Í≥†Ï†ï 6dpÎ°úÎßå Î∂ÄÏó¨ (Îçî Ï§ÑÏòÄÏùå)
        Spacer(Modifier.height(6.dp))

        // count + ÎßàÍ∞êÍ≥µÍ≥† ÏÇ≠Ï†ú
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(30.dp)
                .padding(horizontal = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = countText,
                fontSize = 20.sp,
                fontWeight = FontWeight.SemiBold,
                letterSpacing = (-0.019).em,
                color = Color.Black,
                modifier = Modifier.weight(1f)
            )
            Box(
                modifier = Modifier
                    .height(24.dp)
                    .width(1.dp)
                    .background(Color(0xFF828282))
            )
            Spacer(Modifier.width(8.dp))
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier
                    .clip(RoundedCornerShape(6.dp))
                    .clickable { onDeleteClosed() }
                    .padding(horizontal = 6.dp, vertical = 3.dp)
            ) {
                Text(
                    "ÎßàÍ∞êÍ≥µÍ≥† ÏÇ≠Ï†ú",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = Color(0xFF828282)
                )
                Spacer(Modifier.width(6.dp))
                Icon(
                    painter = painterResource(id = R.drawable.trash),
                    contentDescription = "ÎßàÍ∞êÍ≥µÍ≥† ÏÇ≠Ï†ú",
                    tint = Color(0xFF828282),
                    modifier = Modifier.size(18.dp)
                )
            }
        }
    }
}

/* ===================== ÌÉ≠Î∞î ===================== */
@Composable
private fun RecentTabBar(
    tabs: List<String>,
    selectedIndex: Int,
    onSelected: (Int) -> Unit,
    underlineWidth: Dp
) {
    BoxWithConstraints(
        modifier = Modifier
            .fillMaxWidth()
            .height(45.dp)
            .background(Color.White)
    ) {
        val tabWidth = maxWidth / tabs.size
        val targetOffset = tabWidth * selectedIndex + (tabWidth - underlineWidth) / 2
        val animatedOffset by animateDpAsState(targetValue = targetOffset, label = "tabIndicatorOffset")

        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically
        ) {
            tabs.forEachIndexed { i, label ->
                val selected = i == selectedIndex
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .width(tabWidth)
                        .clickable { onSelected(i) }
                        .padding(vertical = 6.dp)
                ) {
                    Text(
                        text = label,
                        fontSize = 18.sp,
                        lineHeight = 20.sp,
                        fontWeight = if (selected) FontWeight.Bold else FontWeight.Medium,
                        letterSpacing = (-0.2).sp,
                        color = if (selected) PrimaryBlue else Color(0xFF000000)
                    )
                }
            }
        }

        Box(
            modifier = Modifier
                .align(Alignment.BottomStart)
                .offset(x = animatedOffset)
                .width(underlineWidth)
                .height(4.dp)
                .background(PrimaryBlue)
        )
    }
}

/* ===================== Î¶¨Ïä§Ìä∏ & Ïπ¥Îìú ===================== */
@Composable
private fun RecentList(items: List<ViewedItem>) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(ScreenBg)
    ) {
        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            contentPadding = PaddingValues(bottom = 12.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            itemsIndexed(items, key = { _, it -> it.id }) { index, item ->
                if (index == 0) {
                    RecentCard(item) // Ï≤´ Ïπ¥Îìú ÏúÑ ÌöåÏÉâ Ï†úÍ±∞
                } else {
                    RecentCard(item)
                }
            }
        }
    }
}

@Composable
private fun RecentCard(item: ViewedItem) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White)
            .heightIn(min = 120.dp)
            .padding(horizontal = 16.dp, vertical = 20.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            val stateLabel = if (item.isOpen) "Î™®ÏßëÏ§ë" else "ÎßàÍ∞ê"
            val stateColor = if (item.isOpen) PrimaryBlue else TextGray
            Text(
                text = stateLabel,
                fontSize = 14.sp,
                fontWeight = FontWeight.SemiBold,
                letterSpacing = (-0.019).em,
                color = stateColor
            )
            Spacer(Modifier.weight(1f))
            IconButton(onClick = { /* TODO */ }, modifier = Modifier.size(28.dp)) {
                Icon(Icons.Outlined.MoreHoriz, contentDescription = "ÎçîÎ≥¥Í∏∞", tint = Color(0xFF343330))
            }
        }
        Text(item.company, fontSize = 16.sp, fontWeight = FontWeight.Medium, color = TextGray)
        Text(
            text = item.title,
            fontSize = 20.sp,
            fontWeight = FontWeight.Medium,
            color = Color(0xFF000000),
            maxLines = 3,
            overflow = TextOverflow.Ellipsis
        )
    }
}

/* ===================== Util ===================== */
private fun countText(count: Int): AnnotatedString = buildAnnotatedString {
    append("Ï¥ù ")
    pushStyle(SpanStyle(color = PrimaryBlue))
    append("${count}Í±¥")
    pop()
    append("Ïùò ÏïåÎ∞îÍ∞Ä ÏûàÏñ¥Ïöî")
}
