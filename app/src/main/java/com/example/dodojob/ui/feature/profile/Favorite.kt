package com.example.dodojob.ui.feature.profile

import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBackIosNew
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.em
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.compose.foundation.layout.BoxWithConstraints
import com.example.dodojob.R

/* ===================== ÏÉâÏÉÅ ===================== */
private val PrimaryBlue = Color(0xFF005FFF)
private val TextGray    = Color(0xFF848484)
private val ScreenBg    = Color(0xFFF1F5F7)
private val DangerRed   = Color(0xFFFF2F00)

/* ===================== Îç∞Ïù¥ÌÑ∞ Î™®Îç∏ ===================== */
data class LikedItem(
    val id: String,
    val company: String,
    val title: String,
    val isOpen: Boolean,
    val likedAt: String // (ÌëúÏãúÎäî Ïïà ÌïòÏßÄÎßå Ïú†ÏßÄ)
)

/* ===================== Fake DB ===================== */
private object LikedFakeDb {
    fun items(): List<LikedItem> = listOf(
        LikedItem("l1", "Î™®ÎçòÌïòÏö∞Ïä§", "Îß§Ïû•Ïö¥ÏòÅ Î∞è Í≥†Í∞ùÍ¥ÄÎ¶¨ ÌïòÎäî ÏùºÏóê Ï†ÅÌï©Ìïú Î∂Ñ Íµ¨Ìï¥Ïöî", true,  "2025.08.25"),
        LikedItem("l2", "ÎåÄÍµ¨ÎèôÍµ¨ Ïñ¥Î¶∞Ïù¥ÎèÑÏÑúÍ¥Ä", "ÏïÑÏù¥Îì§ Ï±Ö ÏùΩÏñ¥Ï£ºÍ∏∞, ÎèÖÏÑú ÏäµÍ¥Ä ÌòïÏÑ± ÌîÑÎ°úÍ∑∏Îû® ÏßÄÏõê", false, "2025.08.20"),
        LikedItem("l3", "ÏàòÏÑ±Íµ¨ Ï≤¥Ïú°ÏÑºÌÑ∞", "ÌöåÏõê Ïö¥Îèô ÏßÄÎèÑ Î≥¥Ï°∞, ÏÑºÌÑ∞ Í¥ÄÎ¶¨ Í∞ÄÎä•ÌïòÏã† Î∂Ñ ÏßÄÏõê ÏöîÎßù", true,  "2025.08.14"),
    )
}

/* ===================== Route ===================== */
@Composable
fun LikedJobsRoute(nav: NavController) {
    var all by remember { mutableStateOf(LikedFakeDb.items()) }
    var selectedTab by remember { mutableStateOf(0) } // 0: Ï†ÑÏ≤¥, 1: Î™®ÏßëÏ§ë

    val visible = remember(selectedTab, all) {
        if (selectedTab == 0) all else all.filter { it.isOpen }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        LikedTopSection(
            nav = nav,
            countText = countText(visible.size),
            onDeleteClosed = { all = all.filter { it.isOpen } }
        )

        LikedTabBar(
            tabs = listOf("Ï†ÑÏ≤¥", "Î™®ÏßëÏ§ë"),
            selectedIndex = selectedTab,
            onSelected = { selectedTab = it },
            underlineWidth = 68.dp
        )

        LikedList(visible)
    }
}

/* ===================== ÏÉÅÎã® ÏÑπÏÖò ===================== */
@Composable
private fun LikedTopSection(
    nav: NavController,
    countText: AnnotatedString,
    onDeleteClosed: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White)
    ) {
        // ÏÉÅÌÉúÎ∞î
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(24.dp)
                .background(Color(0xFFEFEFEF))
        )

        // ÌÉÄÏù¥ÌãÄ (ÌîÑÎ°úÌïÑ/ÏµúÍ∑º Î≥∏ Í≥º ÎèôÏùº Í∑úÍ≤©)
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight()
                .padding(start = 16.dp, top = 14.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(24.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(onClick = { nav.popBackStack() }, modifier = Modifier.size(24.dp)) {
                    Icon(Icons.Outlined.ArrowBackIosNew, contentDescription = "Îí§Î°ú", tint = Color.Black)
                }
            }
            Spacer(Modifier.height(10.dp))
            Row(
                modifier = Modifier.height(56.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Ï¢ãÏïÑÏöîÌïú ÏùºÏûêÎ¶¨",
                    fontSize = 32.sp,
                    fontWeight = FontWeight.SemiBold,
                    letterSpacing = (-0.019).em,
                    color = Color.Black
                )
            }
        }

        // ÌÉÄÏù¥ÌãÄ ÏïÑÎûò Í∞ÑÍ≤© Ï∂ïÏÜå
        Spacer(Modifier.height(6.dp))

        // Ïπ¥Ïö¥Ìä∏ + ÎßàÍ∞êÍ≥µÍ≥† ÏÇ≠Ï†ú
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(30.dp)
                .padding(horizontal = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = countText,
                fontSize = 20.sp,
                fontWeight = FontWeight.SemiBold,
                letterSpacing = (-0.019).em,
                color = Color.Black,
                modifier = Modifier.weight(1f)
            )
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.clickable { onDeleteClosed() }
            ) {
                Text(
                    "ÎßàÍ∞êÍ≥µÍ≥† ÏÇ≠Ï†ú",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = Color(0xFF828282)
                )
                Spacer(Modifier.width(6.dp))
                Icon(
                    painter = painterResource(id = R.drawable.trash),
                    contentDescription = "ÎßàÍ∞êÍ≥µÍ≥† ÏÇ≠Ï†ú",
                    tint = Color(0xFF828282),
                    modifier = Modifier.size(18.dp)
                )
            }
        }
    }
}

/* ===================== ÌÉ≠Î∞î ===================== */
@Composable
private fun LikedTabBar(
    tabs: List<String>,
    selectedIndex: Int,
    onSelected: (Int) -> Unit,
    underlineWidth: Dp
) {
    BoxWithConstraints(
        modifier = Modifier
            .fillMaxWidth()
            .height(45.dp)
            .background(Color.White)
    ) {
        val tabWidth = maxWidth / tabs.size
        val targetOffset = tabWidth * selectedIndex + (tabWidth - underlineWidth) / 2
        val animatedOffset by animateDpAsState(targetValue = targetOffset, label = "tabIndicatorOffset")

        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically
        ) {
            tabs.forEachIndexed { i, label ->
                val selected = i == selectedIndex
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .width(tabWidth)
                        .clickable { onSelected(i) }
                        .padding(vertical = 6.dp)
                ) {
                    Text(
                        text = label,
                        fontSize = 18.sp,
                        lineHeight = 20.sp,
                        fontWeight = if (selected) FontWeight.Bold else FontWeight.Medium,
                        letterSpacing = (-0.2).sp,
                        color = if (selected) PrimaryBlue else Color(0xFF000000)
                    )
                }
            }
        }

        Box(
            modifier = Modifier
                .align(Alignment.BottomStart)
                .offset(x = animatedOffset)
                .width(underlineWidth)
                .height(4.dp)
                .background(PrimaryBlue)
        )
    }
}

/* ===================== Î¶¨Ïä§Ìä∏ ===================== */
@Composable
private fun LikedList(items: List<LikedItem>) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(ScreenBg)
    ) {
        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            contentPadding = PaddingValues(bottom = 12.dp) // üëà ÏúÑÏ™Ω Ìå®Îî© Ï†úÍ±∞
        ) {
            itemsIndexed(items, key = { _, it -> it.id }) { index, item ->
                Box(
                    modifier = Modifier
                        .padding(
                            top = if (index == 0) 0.dp else 12.dp, // Ï≤´ Î≤àÏß∏Îäî ÏúÑ Í∞ÑÍ≤© 0
                            start = 0.dp,
                            end = 0.dp
                        )
                ) {
                    LikedCard(item)
                }
            }
        }
    }
}


/* ===================== Ïπ¥Îìú ===================== */
@Composable
private fun LikedCard(item: LikedItem) {
    var liked by remember { mutableStateOf(true) }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White)
            .padding(horizontal = 16.dp, vertical = 20.dp)
    ) {
        // üîπ ÏÉÅÎã® Row
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            val stateLabel = if (item.isOpen) "Î™®ÏßëÏ§ë" else "ÎßàÍ∞ê"
            val stateColor = if (item.isOpen) PrimaryBlue else TextGray
            Text(
                text = stateLabel,
                fontSize = 14.sp,
                fontWeight = FontWeight.SemiBold,
                letterSpacing = (-0.019).em,
                color = stateColor
            )
            Spacer(Modifier.weight(1f))

            IconButton(onClick = { liked = !liked }) {
                Icon(
                    painter = painterResource(id = R.drawable.heart),
                    contentDescription = if (liked) "Ï¢ãÏïÑÏöî Ï∑®ÏÜå" else "Ï¢ãÏïÑÏöî",
                    tint = if (liked) DangerRed else TextGray,
                    modifier = Modifier.size(22.dp)
                )
            }
        }

        // üëá RowÏôÄ ÌöåÏÇ¨Î™Ö ÏÇ¨Ïù¥Îßå Ï¢ÅÍ≤å (Ïòà: 6dp)
        Spacer(Modifier.height(2.dp))

        Text(
            item.company,
            fontSize = 16.sp,
            fontWeight = FontWeight.Medium,
            color = TextGray
        )

        Spacer(Modifier.height(12.dp)) // ÌöåÏÇ¨Î™Ö ‚Üî Ï†úÎ™© Í∞ÑÍ≤© Ïú†ÏßÄ

        Text(
            text = item.title,
            fontSize = 20.sp,
            fontWeight = FontWeight.Medium,
            color = Color(0xFF000000),
            maxLines = 3,
            overflow = TextOverflow.Ellipsis
        )

        Spacer(Modifier.height(16.dp)) // Ï†úÎ™© ‚Üî Î≤ÑÌäº Í∞ÑÍ≤© Ïú†ÏßÄ

        // ÏßÄÏõêÌïòÍ∏∞ Î≤ÑÌäº
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(54.dp)
                .clip(RoundedCornerShape(10.dp))
                .background(PrimaryBlue)
                .clickable { /* TODO */ },
            contentAlignment = Alignment.Center
        ) {
            Text(
                "ÏßÄÏõêÌïòÍ∏∞",
                fontSize = 20.sp,
                color = Color.White,
                fontWeight = FontWeight.Medium
            )
        }
    }
}


/* ===================== Util ===================== */
private fun countText(count: Int): AnnotatedString = buildAnnotatedString {
    append("Ï¥ù ")
    pushStyle(SpanStyle(color = PrimaryBlue))
    append("${count}Í±¥")
    pop()
    append("Ïùò ÏïåÎ∞îÍ∞Ä ÏûàÏñ¥Ïöî")
}
